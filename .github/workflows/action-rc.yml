name: Release â€” Deploy Backend

on:
  push:
    branches:
      - develop
      - release/*
      - feature/*
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        type: string
        default: develop

env:
  BRANCH: ${{ github.event.inputs.branch || github.ref_name }}
  ENVIRONMENT: development
  BACKEND_HOST: ${{ vars.BACKEND_HOST || 'backend_release' }}
  API_PREFIX: ${{ vars.API_PREFIX || '/release_back' }}
  BACKEND_EXT_PORT: ${{ vars.BACKEND_EXT_PORT || 83 }}
  BACKEND_INT_PORT: ${{ vars.BACKEND_INT_PORT || 80 }}
  DEBUG: ${{ vars.DEBUG || 'True' }}
  LOG_LEVEL: ${{ vars.LOG_LEVEL || 'ERROR' }}
  API_V1_STR: ${{ vars.API_V1_STR || '/api/v1' }}
  POSTGRES_HOST: ${{ vars.POSTGRES_HOST || 'postgres_release' }}
  POSTGRES_PORT: ${{ vars.POSTGRES_PORT || 5432 }}
  POSTGRES_DB: ${{ vars.POSTGRES_DB || 'app' }}
  POSTGRES_DB_RECORDED: ${{ vars.POSTGRES_DB_RECORDED || 'recorded' }}
  POSTGRES_USER: ${{ vars.POSTGRES_USER || 'admin' }}
  GHCR_LOCATION: ${{ vars.GHCR_LOCATION || 'h2optimize-end-of-study-project-hetic' }}
  POSTGRES_NETWORK_NAME: ${{ vars.POSTGRES_NETWORK_NAME || 'postgres_release_net' }}

jobs:
  test:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: read
    env:
      POSTGRES_PASSWORD: Changeme!1
      POSTGRES_HOST: postgres
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: Changeme!1
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U admin -d app"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: Generate .env
        run: |
          rm -f .env
          for var in BRANCH ENVIRONMENT BACKEND_HOST API_PREFIX BACKEND_EXT_PORT BACKEND_INT_PORT \
                     DEBUG LOG_LEVEL API_V1_STR POSTGRES_HOST POSTGRES_PORT POSTGRES_DB \
                     POSTGRES_DB_RECORDED POSTGRES_USER GHCR_LOCATION POSTGRES_NETWORK_NAME; do
            echo "$var=${!var}" >> .env
          done

      - name: Build dev Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: development
          push: false
          tags: backend:dev

      - name: Ensure init_db.sh is LF
        run: sed -i 's/\r$//' app/init_db.sh

      - name: Wait for PostgreSQL
        run: |
          for i in {1..15}; do
            if pg_isready -h postgres -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run DB migrations
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            --env-file .env \
            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            backend:dev ./app/init_db.sh

      - name: Run tests
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            --env-file .env \
            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }} \
            -e ALGORITHM=${{ secrets.ALGORITHM }} \
            backend:dev pytest -vvs --cov=app/src --cov-report=term-missing

  build:
    runs-on: ubuntu-latest
    needs: test
    environment: release
    permissions:
      contents: read
      packages: write
    env:
      ENVIRONMENT: production
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env
        run: |
          rm -f .env
          for var in BRANCH ENVIRONMENT BACKEND_HOST API_PREFIX BACKEND_EXT_PORT BACKEND_INT_PORT \
                     DEBUG LOG_LEVEL API_V1_STR POSTGRES_HOST POSTGRES_PORT POSTGRES_DB \
                     POSTGRES_DB_RECORDED POSTGRES_USER GHCR_LOCATION POSTGRES_NETWORK_NAME; do
            echo "$var=${!var}" >> .env
          done
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ghcr.io/${{ env.GHCR_LOCATION }}/${{ env.BACKEND_HOST }}:latest
            ghcr.io/${{ env.GHCR_LOCATION }}/${{ env.BACKEND_HOST }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: release
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env
        run: |
          rm -f .env
          for var in BRANCH ENVIRONMENT BACKEND_HOST API_PREFIX BACKEND_EXT_PORT BACKEND_INT_PORT \
                     DEBUG LOG_LEVEL API_V1_STR POSTGRES_HOST POSTGRES_PORT POSTGRES_DB \
                     POSTGRES_DB_RECORDED POSTGRES_USER GHCR_LOCATION POSTGRES_NETWORK_NAME; do
            echo "$var=${!var}" >> .env
          done
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Deploy container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST }}
          port: ${{ vars.SSH_PORT }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker image prune -af
            docker pull ghcr.io/${{ env.GHCR_LOCATION }}/${{ env.BACKEND_HOST }}:latest
            docker stop ${{ env.BACKEND_HOST }} || true
            docker rm ${{ env.BACKEND_HOST }} || true
            if [ -z "$(docker network ls --filter name=^${{ env.POSTGRES_NETWORK_NAME }}$ --format '{{.Name}}')" ]; then
              docker network create ${{ env.POSTGRES_NETWORK_NAME }}
            fi
            
            docker run -d \
              --name ${{ env.BACKEND_HOST }} \
              --restart always \
              --network ${{ env.POSTGRES_NETWORK_NAME }} \
              -p ${{ env.BACKEND_EXT_PORT }}:${{ env.BACKEND_INT_PORT }} \
              -e BACKEND_HOST=${{ env.BACKEND_HOST }} \
              -e API_PREFIX='${{ env.API_PREFIX }}' \
              -e BACKEND_EXT_PORT=${{ env.BACKEND_EXT_PORT }} \
              -e BACKEND_INT_PORT=${{ env.BACKEND_INT_PORT }} \
              -e ENVIRONMENT=production \
              -e DEBUG=${{ env.DEBUG }} \
              -e LOG_LEVEL=${{ env.LOG_LEVEL }} \
              -e API_V1_STR='${{ env.API_V1_STR }}' \
              -e POSTGRES_HOST=${{ env.POSTGRES_HOST }} \
              -e POSTGRES_PORT=${{ env.POSTGRES_PORT }} \
              -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
              -e POSTGRES_DB_RECORDED=${{ env.POSTGRES_DB_RECORDED }} \
              -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
              -e SECRET_KEY='${{ secrets.SECRET_KEY }}' \
              -e ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }} \
              -e ALGORITHM=${{ secrets.ALGORITHM }} \
              ghcr.io/${{ env.GHCR_LOCATION }}/${{ env.BACKEND_HOST }}:latest
